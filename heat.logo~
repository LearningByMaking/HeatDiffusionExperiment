to heat-exp
  print "|starting heat experiment|
  init-heat
  loop [        
	talkto 19 see-packet   ;heat packet  
        talkto 20 see-packet   ;light packet
        wait 200 
       ]
end

to init-heat
  init-data
  set-calibration
  start-appboard
end

to init-data
  setup-screen
  make "slope-list []
  make "data-list []  
  make "alpha 0.03         ; adjust constant to match simulation to real data
  make "first-time true
  make "heat-list []
  make "light-list []
  make "real-list []
  make "start-time now       ; gets the unit time at the begining of the experiment
  make "check60 0
  make "ocheck60 0
  make "check61 0
  make "ocheck61 0
  make "check 0
  make "ocheck 0

  make "heat-recieved 0
  make "light-recieved 0
end

to set-calibration
  make "temp0_cal [500 22.0 1000 50.0]     ; pairs (adc,temp)
  make "temp1_cal [500 22.0 1000 50.0]     ; pairs (adc,temp)
  make "temp2_cal [500 22.0 1000 50.0]     ; pairs (adc,temp)
  make "temp3_cal [500 22.0 1000 50.0]     ; pairs (adc,temp)
end

to start-appboard

  talkto 19
  stopvm
  wait 5
  ul-ready
  ul-set

  talkto 20
  stopvm
  wait 5
  ul-ready
  ul-set

  talkto 19
  wait 5
  ul-go

  talkto 20
  wait 5
  ul-go

end
  

to see-packet
   make "packet-bytes rl $1fc0 30   ; add checksum and ignore if not new
   if (count :packet-bytes) > 0 
	[
             process-packet
             make "ncol 7
             make "data-list :heat-list
             save-data "heat-list.txt 
	]
    
end

to process-packet  
  make "type nth 1 :packet-bytes   
  if (:type = 60) 
  [ 
     make "check :check60
     make "ocheck :ocheck60
     process-header 
     make "check60 :check
     make "ocheck60 :ocheck
  ]

  if (:type = 61) 
  [ 
     make "check :check61
     make "ocheck :ocheck61
     process-header 
     make "check61 :check
     make "ocheck61 :ocheck
  ] 
end

to process-header
  let [th 0]
  let [tl 0]
  make "ocheck :check
  let [nws ((first :packet-bytes) / 2) + 1]
  make "check wnth :nws :packet-bytes
  ;print (se :check :ocheck)
  if not (:check = :ocheck) 
  [
    make "type nth 1 :packet-bytes
    make "wp packet-words :packet-bytes
    ;print ( se word "T bf 100 + :type round now / 1000 :wp  )    
    make "th wnth 2 :packet-bytes         ; timestamph from packet
    make "tl wnth 3 :packet-bytes         ; timestampl from packet
    if (:type = 60) [ process-heat-packet ]
    if (:type = 61) [ process-light-packet ]
  ]
end

to process-heat-packet
   make "heat-recieved 1
   print-packet 
   make "elapse round ((now - :start-time) / 1000) ; elapsed time (sec)
   make "temp0     wnth 4 :packet-bytes
   make "temp1     wnth 5 :packet-bytes
   make "temp2     wnth 6 :packet-bytes
   make "temp3     wnth 7 :packet-bytes

   make "heat-list se :heat-list :elapse

   make "temp0 calibrate :temp0 :temp0_cal
   make "temp1 calibrate :temp1 :temp1_cal
   make "temp2 calibrate :temp2 :temp2_cal
   make "temp3 calibrate :temp3 :temp3_cal

   add-heat :temp0
   add-heat :temp1
   add-heat :temp2
   add-heat :temp3 
  
end


to process-light-packet
   make "light-recieved 1
   print-packet 
   make "day-night wnth 4 :packet-bytes
   make "day-night 10 * :day-night + 5
   make "light wnth 5 :packet-bytes
   make "light :light / 10 - 20
   add-heat :day-night
   add-heat :light
   
   make "ncol 7      ;elapse, temp0, temp1, temp2, temp3, day-night, light
   data-recieved
end

to data-recieved
   if(:light-recieved = 1)
   [
     if(:heat-recieved = 1)
     [ 
       plot-data
       wait 5
       display |-geometry 400x300+900+50|
     ]
   ]
  make "heat-recieved 0
  make "light-recieved 0
end

to print-packet
  make "wp packet-words :packet-bytes
  print ( se word "T bf 100 + :type round now / 1000 :wp  ) 
end

to calibrate :n :m
  let [adc0 nth 0 :m]
  let [adc1 nth 2 :m]
  let [val0 nth 1 :m]
  let [val1 nth 3 :m]
  let [slope (:val1 - :val0) / (:adc1 - :adc0)] ;later find the correct pair - assume one point for now
  output  ((:n - :adc0) * :slope) + :val0
end

to plot-data
ltype 1      ; black white lines
ptype 2      ; circles

make "ncol 7
make "data-list :heat-list
xcol 1
ycol 3

limits 0 xupper 0.0 70.0
make "last xupper

clean
grid 10 7
box
xaxis 10 1
yaxis 7 1

title "|Temperature (deg C) versus Time|
xlabel "|Time (seconds)|
ylabel "Temp
red
histogram

make "ncol 7
make "data-list :heat-list
xcol 1
ycol 4
green
histogram

make "ncol 7
make "data-list :heat-list
xcol 1
ycol 5
cyan
histogram

make "ncol 7
make "data-list :heat-list
xcol 1
ycol 6
magenta
histogram

make "ncol 7
make "data-list :heat-list
xcol 1
ycol 2
blue 
histogram

make "ncol 7
make "data-list :heat-list
xcol 1
ycol 7
black 
histogram


rel 1.05 * :last 15 label "Day
rel 1.05 * :last  5 label "Night

    if ((count :xcol-data) > 5) [
      make "t1 :elapse - 120
      make "t2 :elapse
      
      xcol 1                 ; time
      ycol 3                 ;surface temp
      select-data :t1 :t2
      ; blue
      make "slope fit-line
      make "slope 60 * :slope + 60
      make "slope-list se  se  :slope-list ((:t1 + :t2) / 2)  :slope

      make "data-list :slope-list
      make "ncol 2
      xcol 1
      ycol 2
      red
      points
      rel 0 60 draw :last 60
      rel 1.05 * :last 65 label "Rise
      rel 1.05 * :last 55  label "Fall
      ]

redraw
end



to packet-words :l           ; this version leaves off the checksum
  let [res []]
  let [nws (first :l) / 2 + 2]
  if ( :nws > 25 ) [ make "nws 25 ]
  dotimes [i :nws - 1][make "res se :res bf 100000 + wnth :i :l]
  output :res
end


to wnth :i :l
  output (nth 2 * :i :l) + 256 * (nth 2 * :i + 1 :l)
end

to add-heat :value
 make "heat-list se :heat-list :value	
end



   
